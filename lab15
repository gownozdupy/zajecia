#include <iostream>
#include <random>
#include <numeric>
#include "konten.h"  // Załóżmy, że konten.h zawiera definicję Konten

template <typename T, int ssize>
class Kalkulator {
public:
    template <typename U>
    struct pomiary {
        Konten<U, ssize> przed;
        Konten<U, ssize> po;
    };

    static void testtStudenta(
        typename Konten<pomiary<T, ssize>>::iterator& pierwszy,
        typename Konten<pomiary<T, ssize>>::iterator& drugi) {

        T min_value = std::numeric_limits<T>::max();

        for (auto it = pierwszy; it != drugi; ++it) {
            // Obliczenia i porównania
            // ...

            if (warunek) {
                min_value = wynik;
                pierwszy = it;
            }
        }
    }
};

int main() {
    const int m = 7; // Ilość serii pomiarów
    const int n = 5; // Długość serii pomiarów

    // Tworzenie kontenera Konten<pomiary<double, n>>
    Konten<typename Kalkulator<double, n>::pomiary<double>, m> kontener;

    // Parametry testu
    // Inicjalizacja serii wartości losowych
    for (int i = 0; i < m; ++i) {
        Kalkulator<double, n>::pomiary<double> serie;
        for (int j = 0; j < n; ++j) {
            serie.przed.push(1.0 * j);  // Przykładowe dane
            serie.po.push(2.0 * j);     // Przykładowe dane
        }
        kontener.push(serie);
    }

    // Deklaracja obiektu Kalkulator
    Kalkulator<double, n> kalkulator;

    // Wywołanie metody testtStudenta
    auto pierwszy = kontener.begin();
    auto drugi = kontener.end();

    kalkulator.testtStudenta(pierwszy, drugi);

    std::cout << "Najmniejsza wartość T znajduje się w serii pomiarów nr " << (pierwszy - kontener.begin()) << std::endl;

    return 0;
}

#include <iostream>
#include <fstream>
#include <string>



template <typename T>
class DataContainer {
private:
	struct Node {
		T data;
		Node* next;
		Node(const T& val) : data(val), next(nullptr) {}
	};

	Node* head;  // Wskaźnik na pierwszy element listy
	Node* current;  // Wskaźnik na bieżący element listy

	std::string filename;  // Nazwa pliku

public:
	// Konstruktor bezargumentowy
	DataContainer() : head(nullptr), current(nullptr) {}

	// Konstruktor jednoargumentowy
	DataContainer(const std::string& file) : head(nullptr), current(nullptr), filename(file) {
		open(file);
	}

	// Destruktor
	~DataContainer() {
		while (head != nullptr) {
			Node* temp = head;
			head = head->next;
			delete temp;
		}
	}
	// Otwieranie pliku i wczytywanie danych
	void open(const std::string& file) {
		filename = file;
		std::ifstream input(filename);

		if (input.is_open()) {
			T value;
			while (input >> value) {
				insert(value);
			}
			input.close();
			rewind();
		}
	}
	// Wstawianie nowego elementu po bieżącym elemencie
	void insert(const T& value) {
		if (current == nullptr) {
			return;
		}
		Node* newNode = new Node(value);
		newNode->next = current->next;
		current->next = newNode;
		current = newNode;
	}

	// Zapisywanie danych do pliku
	void save() {
		save(filename);
	}

	void save(const std::string& file) {
		std::ofstream output(file);

		if (output.is_open()) {
			Node* temp = head;
			while (temp != nullptr) {
				output << temp->data << std::endl;
				temp = temp->next;
			}
			output.close();
		}
	}
	// Pobieranie bieżącego elementu i przesuwanie wskaźnika
	bool get(T& value) {
		if (current == nullptr) {
			return false;
		}
		value = current->data;
		current = current->next;
		return true;
	}
	// Sprawdzanie, czy wskaźnik jest na końcu listy
	bool end() const {
		return current == nullptr;
	}

	// Ustawianie wskaźnika na początek listy
	void rewind() {
		current = head;
	}
};
